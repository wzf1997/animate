parser: '@typescript-eslint/parser'

parserOptions:
  ecmaFeatures:
    jsx: true
  ecmaVersion: 2020
  sourceType: module

env:
  browser: true
  es6: true
  node: true
  jest: true

plugins:
  - import
  - sonarjs
  # - react-hooks

extends:
  - eslint:recommended
  # - plugin:react/recommended
  - plugin:sonarjs/recommended
  - plugin:prettier/recommended

settings:
  # react:
  #   pragma: React
  #   version: detect
  import/internal-regex: ^@(fly)/

rules:
  # 0 = off, 1 = warn, 2 = error
  'no-unused-vars': [2, { varsIgnorePattern: '^_', argsIgnorePattern: '^_', ignoreRestSiblings: true }]
  'no-undef': 2
  'no-console': [2, { allow: ['warn', 'info', 'assert', 'alert'] }]
  'comma-dangle': ['error', 'only-multiline']
  'no-var': 2
  'one-var-declaration-per-line': 2
  'prefer-const': 2
  'no-const-assign': 2
  'no-use-before-define': [2, { 'functions': false, 'classes': false }]
  'eqeqeq': [2, 'always', { 'null': 'ignore' }]

  # https://github.com/benmosher/eslint-plugin-import/pull/334
  'import/no-duplicates': 2
  'import/first': 2
  'import/newline-after-import': 2
  'import/order':
    [
      2,
      {
        'newlines-between': 'always',
        'alphabetize': { 'order': 'asc' },
        'groups': ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],
      },
    ]

  # 'react/prop-types': 0
  # 'react/jsx-no-multiline-js': 0
  # 'react/jsx-equals-spacing': 0
  # 'react/no-find-dom-node': 0
  # 'react/no-unknown-property': [0, { ignore: ['css'] }]
  # 'react/react-in-jsx-scope': 0
  # 'react/jsx-key': 2
  # 'react/no-string-refs': 2
  # 'react/self-closing-comp': 2
  # 'react/no-deprecated': 2
  # 'react/jsx-no-bind': 2
  # # to be confirmed
  # 'react/display-name': 0 # 2?
  # 'react/jsx-no-target-blank': 0
  # 'react/no-unescaped-entities': 0

  # 'react-hooks/rules-of-hooks': 2
  # 'react-hooks/exhaustive-deps': 2

  'sonarjs/cognitive-complexity': 0
  'sonarjs/no-duplicate-string': 0
  'sonarjs/no-identical-functions': 0
  'sonarjs/no-small-switch': 2

overrides:
  - files:
      - examples/**/*.{ts,tsx}
      - packages/**/*.{ts,tsx}
      - scripts/**/*.ts
    plugins:
      - '@typescript-eslint'
    extends:
      - prettier
      - plugin:import/typescript
    parserOptions:
      project:
        - ./tsconfig.json
        - ./scripts/tsconfig.json
    rules:
      'no-undef': 0
      # TypeScript declare merge
      'no-redeclare': 0
      'no-useless-constructor': 0
      'no-unused-vars': 0
      'no-dupe-class-members': 0
      'no-case-declarations': 0
      'no-duplicate-imports': 0
      # TypeScript Interface and Type
      'no-use-before-define': 0
      '@typescript-eslint/adjacent-overload-signatures': 2
      '@typescript-eslint/await-thenable': 2
      '@typescript-eslint/consistent-type-assertions': 2
      '@typescript-eslint/ban-types':
        [
          'error',
          {
            'types':
              {
                'String': { 'message': 'Use string instead', 'fixWith': 'string' },
                'Number': { 'message': 'Use number instead', 'fixWith': 'number' },
                'Boolean': { 'message': 'Use boolean instead', 'fixWith': 'boolean' },
                'Function': { 'message': 'Use explicit type instead' },
              },
          },
        ]
      '@typescript-eslint/explicit-member-accessibility':
        [
          'error',
          {
            accessibility: 'explicit',
            overrides:
              {
                accessors: 'no-public',
                constructors: 'no-public',
                methods: 'no-public',
                properties: 'no-public',
                parameterProperties: 'explicit',
              },
          },
        ]
      '@typescript-eslint/method-signature-style': 2
      '@typescript-eslint/no-floating-promises': 2
      '@typescript-eslint/no-implied-eval': 2
      '@typescript-eslint/no-for-in-array': 2
      '@typescript-eslint/no-inferrable-types': 2
      '@typescript-eslint/no-invalid-void-type': 2
      '@typescript-eslint/no-misused-new': 2
      'no-async-promise-executor': 0
      '@typescript-eslint/no-misused-promises': [2, { 'checksVoidReturn': false }]
      '@typescript-eslint/no-namespace': 2
      '@typescript-eslint/no-non-null-asserted-optional-chain': 2
      '@typescript-eslint/no-throw-literal': 2
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 2
      '@typescript-eslint/prefer-for-of': 2
      '@typescript-eslint/prefer-nullish-coalescing': 2
      '@typescript-eslint/switch-exhaustiveness-check': 2
      '@typescript-eslint/prefer-optional-chain': 2
      '@typescript-eslint/prefer-readonly': 2
      '@typescript-eslint/prefer-string-starts-ends-with': 0
      '@typescript-eslint/no-array-constructor': 2
      '@typescript-eslint/require-await': 2
      '@typescript-eslint/return-await': 2
      '@typescript-eslint/ban-ts-comment':
        [2, { 'ts-expect-error': false, 'ts-ignore': true, 'ts-nocheck': true, 'ts-check': false }]
      '@typescript-eslint/naming-convention':
        [
          2,
          {
            selector: 'memberLike',
            format: ['camelCase', 'PascalCase'],
            modifiers: ['private'],
            leadingUnderscore: 'forbid',
          },
        ]
      # Temporary disabled: https://github.com/typescript-eslint/typescript-eslint/issues/2972
      # '@typescript-eslint/no-unused-vars':
      #   [2, { varsIgnorePattern: '^_', argsIgnorePattern: '^_', ignoreRestSiblings: true }]
      '@typescript-eslint/member-ordering':
        [
          2,
          {
            default:
              [
                'public-static-field',
                'protected-static-field',
                'private-static-field',
                'public-static-method',
                'protected-static-method',
                'private-static-method',
                'public-instance-field',
                'protected-instance-field',
                'private-instance-field',
                'public-constructor',
                'protected-constructor',
                'private-constructor',
                'public-instance-method',
                'protected-instance-method',
                'private-instance-method',
              ],
          },
        ]

  - files:
      - cypress/**/*.{ts,tsx}
    plugins:
      - '@typescript-eslint'
    parserOptions:
      project: ./cypress/tsconfig.json
    rules:
      'no-undef': 0
      # TypeScript Interface and Type
      'no-use-before-define': 0
      'no-unused-vars': 0
      'sonarjs/no-small-switch': 0
      '@typescript-eslint/no-floating-promises': 0
      '@typescript-eslint/no-namespace': 0

  - files:
      - packages/**/__{tests,test}__/**/*.{ts,tsx}
    plugins:
      - '@typescript-eslint'
    parserOptions:
      project: ./tsconfig.json
    rules:
      'no-prototype-builtins': 0
      'no-undef': 0
      # TypeScript Interface and Type
      'no-use-before-define': 0
      'no-unused-vars': 0
      '@typescript-eslint/no-floating-promises': 0
      '@typescript-eslint/no-namespace': 0
globals:
  Cypress: readonly
  cy: readonly
  globalThis: readonly
  API_URL: readonly
